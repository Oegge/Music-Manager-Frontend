@import '@angular/material/prebuilt-themes/indigo-pink.css';
@import "./styles/variables.scss";

.row {
  display: grid;
  grid-auto-flow: column; /* This stacks them horizontally */

}

.column {
  display: grid;
  grid-auto-flow: row; /* This stacks them horizontally */

}

.boundary {
  fill: var(--border-color);
}

.text {
  pointer-events: none;
}

.backgrounds.rollable:hover {
  cursor: pointer;
  pointer-events: all; /* Ensure it captures hover events */

  transition: fill 0.4s ease;
  fill: var(--background-ability-opaque);
  fill-opacity: 0.6;
}

input[type="checkbox"] {
  all: unset;
  display: inline-block;
  width: 20px;
  height: 20px;
  cursor: pointer;
  fill: red;
  background-size: contain; /* or cover, as needed */
  background-repeat: no-repeat;
  background-image: url("/assets/svg/Checkbox_unchecked_opt.svg");
}

input[type="checkbox"]:checked {
  background-image: url("/assets/svg/Checkbox_checked_opt.svg");
}

.button {
  width: fit-content;
  height: fit-content;
  margin: auto;
  background-color: #555;
  color: white;
  padding: 8px 16px;
  border: 1px solid var(--border-color);
  border-radius: 10px;
  cursor: pointer;
}

.button.inactive {
  background-color: #ccc; /* Lighter background to indicate inactivity */
  color: #666; /* Dimmed text color */
  cursor: not-allowed; /* Cursor shows the button is not clickable */
  opacity: 0.5; /* Make the button look faded */
}

.button:not(.inactive):hover {
  transform: scale(1.05); /* Slightly enlarges the button */
  transition: transform 0.1s; /* Smooth transition for the transformation */
}

/* Styling for the input field */
.value-input {
  width: 50%;
  font-weight: bold;
  background-color: var(--background-ability);
  border: 1px solid var(--border-color);
  border-radius: 8px; /* Rounded corners */
  padding: 0.5rem;
  font-size: 1rem;
  text-align: center; /* Center the text inside the input */
}

.value-input::placeholder {
  color: var(--text-color-solid); /* Light grey placeholder */
}

.value-input:focus {
  box-shadow: 0 0 5px rgba(231, 76, 60, 0.5); /* Subtle red shadow on focus */
  outline: none;
}

input[type="number"] {
  background-color: var(--background-color-translucent); /* dark background */
  color: #58ff33; /* yellowish text */
  border: 2px solid var(--border-color); /* dark red border */
  border-radius: 8px; /* rounded corners */
  text-align: center; /* center the number */
  font-size: 24px; /* large number */
  width: 60px; /* control width */
  height: 40px; /* control height */
  outline: none; /* remove blue outline */
}

/* Optional: Hide number input arrows */
input[type="number"]::-webkit-outer-spin-button,
input[type="number"]::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

input[type="text"] {
  background-color: var(--background-color-translucent); /* dark background */
  border: 2px solid var(--border-color); /* dark red border */
  color: var(--text-color-solid);
  border-radius: 8px; /* rounded corners */
  text-align: center; /* center the number */
  font-size: 24px; /* large number */
  width: 60px; /* control width */
  height: 40px; /* control height */
  outline: none; /* remove blue outline */
}

/* Optional: Hide number input arrows */
input[type="text"]::-webkit-outer-spin-button,
input[type="text"]::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

input.invalid {
  border-color: #003bff;
  background-color: rgba(255, 0, 0, 0.1);
  box-shadow: 0 0 5px red;
}

.btn {
  display: inline-block;
  padding: 0.5rem 1rem;
  font-size: 1rem;
  font-weight: 600;
  line-height: 1.2;
  border: none;
  border-radius: 0.375rem; /* 6px */
  cursor: pointer;
  text-align: center;
  transition: background-color 0.2s, box-shadow 0.2s;

  /* Reset default user-agent focus */

  &:focus {
    outline: none;
  }

  /* Use focus-visible for browsers that support it */

  &:focus-visible {
    box-shadow: 0 0 0 3px var(--shadow-color);
  }

  &.accept {
    background-color: var(--button-color-solid);
    color: var(--text-color-solid);

    &:hover {
      background-color: var(--button-color-hover-solid);
    }

    &:active {
      background-color: var(--button-color-translucent);
    }
  }

  &.cancel {
    background-color: var(--button-secondary-color-solid);
    color: var(--text-color-solid);

    &:hover {
      background-color: var(--button-secondary-color-hover-solid);
    }

    &:active {
      background-color: var(--button-secondary-color-translucent);
    }
  }

  /* Disabled state if you ever need it */

  &:disabled,
  &.disabled {
    background-color: #9e9e9e;
    color: #ffffff;
    cursor: not-allowed;
    opacity: 0.7;
  }
}

